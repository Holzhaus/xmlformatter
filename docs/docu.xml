<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
  <articleinfo>
     <title>xmlformatter</title>
    <cover role="spec">
    <para>Name: xmlformatter</para>
    <para>Language: Python (2, 3)</para>
    <para>Author: P. A. Möller, <olink targetdoc="http://pamoller.com">pamoller.com</olink></para>
    <para>License: MIT (Open Source)</para>
    <para>First Published: 01/2014</para>
    <para>Acutal Version: 0.1.0</para>
    <para>
       <olink targetdoc="http://pamoller.com/xmlformatter.html">Home</olink>
       <olink targetdoc="http://pypi.python.org/pypi/xmlformatter/">Download</olink>
       <olink targetdoc="https://github.com/pamoller/xmlformatter">Sources</olink></para>      
    </cover>
  </articleinfo>
  <para><olink targetdoc="http://pamoller.com/xmlformatter.html">xmlformatter</olink> is an Open Source Python package, which provides formatting of XML documents. <emphasis>It is the replacement for the Python 2 package XmlFormatter, which has been removed from PyPi completely (see Notes)</emphasis>. xmlformatter differs from others formatters by <emphasis>handling whitespaces by a distinct set of formatting rules</emphasis> - formatting element content by a object style and mixed content by a text style. You may find xmlformatter useful for corrections and presentations. In addition xmlformatter comes with a wrapper script named xmlformat.</para>
  <section><title>Formatting Rules</title>
  <para>xmlformatter treats the element content from the following example as a object. The elements are associated with containers, like complex, or properties names, like real and imaginary. Text nodes are associated with property values, like 4.4E+12. Leading and trailing whitespaces are meaningless in this scenario like sequences of whitespaces. Leading and trailing whitespaces will be remove, sequences of whitespaces will be collapsed.</para>
<programlisting language="xml"><![CDATA[<complex>
  <real>  4.4E+12</real>
 <imaginary>5.4E-11
   </imaginary>
</complex>]]></programlisting>
<para>The element content from the example above can be formatted by xmlformat:</para>
<programlisting language="bash">$ xmlformat ele.xml</programlisting>
<para>The following output shows the formatted XML document. xmlformatter has removed leading and trailing whitespaces from the text nodes and has indented the child elements equal. This formatting style is called object style.</para>
<programlisting language="xml"><![CDATA[<complex>
  <real>4.4E+12</real>
  <imaginary>5.4E-11</imaginary>
</complex>]]></programlisting>
<para>xmlformatter treats the mixed content from the following example as a literal text with some markup. The outer element enclose poem encloses the text. The inline element em gives a text snippet a special meaning. Leading and trailing whitespaces enclosed by inline elements are misplaced. They will be adopted by the previous or following text node. Note: xmlformatter may insert a text node if necessary. Even sequences of whitespaces will be collapsed:</para>
<programlisting language="xml"><![CDATA[<poem> Es<em>   war</em> einmal und <em>ist  </em>nicht mehr...</poem>]]></programlisting>
<para>The following output shows the formatted XML document. xmlfromatter has removed leading and trailing whitespaces and has collapsed sequences of whitespaces. This formatting style is called text style.</para>
<programlisting language="xml"><![CDATA[<poem>Es <em>war</em> einmal und <em>ist</em> nicht mehr...</poem>]]></programlisting>

<para>Both styles are used while formatting a XML document. The formatting rules are:</para>
<itemizedlist>
<listitem><para>A: Surrounding whitespaces are removed from element content.</para></listitem>
<listitem><para>B: Leading whitespaces are removed from element content.</para></listitem>
<listitem><para>C: Trailing whitespaces are removed from element content.</para></listitem>
<listitem><para>D: Leading whitespaces of inline elements are put to preceding text (or inserted) if necessary within mixed content.</para></listitem>
<listitem><para>E: Trailing whitespaces of inline elements are put to following text (or inserted) if necessary within mixed content.</para></listitem>
<listitem><para>F: Sequences of whitespaces (n>2) are replaced by a single blank " " within element and mixed content.</para></listitem>
<listitem><para>G: Linebreak and whitespace are used to indent elements within elements content.</para></listitem>
</itemizedlist>
<para>The following example shows the described whitespaces by their labels within a XML document:</para>
<programlisting language="xml"><![CDATA[<root>AAAA
AAAA<number>BBBB4.4E+12CCC</number>AAAA
AAAA<poem>BBBBEs<em>DDDDwar</em> einmal und <em>istEEEE</em>nicht mehrF
FFFFein <strong>riesengroßer</strong><em>DDDDTeddybär</em>,F 
der aßFFFFdie <em>MilchEEEE</em>und trank das BrotFFFF
und als er starb da <strong>war erEEEE</strong><em>tot</em>.CCCC</poem>AAAA
</root>]]></programlisting>
<para>The following output shows the formatted XML document:</para>
<programlisting language="xml"><![CDATA[<root>
    <number>4.4E+12</number>
    <poem>Es <em>war</em> einmal und <em>ist</em> nicht mehr ein <strong>riesengroßer</strong> <em>Teddybär</em>, der aß die <em>Milch</em>und trank das Brot und als er starb da <strong>war er</strong> <em>tot</em>.</poem>
</root>]]></programlisting>
</section>
<section>
   <title>Class</title>
   <methodsynopsis>
  <type>class</type>
  <methodname>xmlformatter.Formatter</methodname>
  <methodparam>
    <parameter>compress</parameter>
    <initializer>False</initializer>
  </methodparam>
  <methodparam>
    <parameter>indent</parameter>
    <initializer>2</initializer>
  </methodparam>
  <methodparam>
  <parameter>indent_char</parameter>
  <initializer>" "</initializer>
  </methodparam>
  <methodparam>
   <parameter>inline</parameter>
   <initializer>True</initializer>
  </methodparam>
  <methodparam>
   <parameter>encoding_input</parameter>
   <initializer>None</initializer>
  </methodparam>
  <methodparam>
    <parameter>encoding_output</parameter>
    <initializer>None</initializer>
  </methodparam>
  <methodparam>
    <parameter>preserve</parameter>
    <initializer>[ ]</initializer>
  </methodparam>
</methodsynopsis>
   <para>The Formatter class can be used to format XML documents in scripts. By default all parts of the XML document will formatted. All descendants of elements listed by preserve are left unformatted. Setting the boolean property compress to True suppresses the indenting given by the indent and indent_char properties. Without a value given to encoding_input xmlformatter trys to determine the encoding from the XML document. On failure it use UTF-8 as default. encoding_output advises xmlformatter to encode the output explicit by the given value. Otherwise xmlformatter use the inpurt encoding. Setting the boolean property inline to False suppresses inline formatting. By default element content will be formatted everywhere - also within mixed content. The following example shows the usage of the xmlfromatter class:</para>
   <programlisting language="python">import xmlformatter

formatter = xmlformatter.Formatter(indent="1", indent_char="\t", encoding_output="ISO-8859-1", preserve=["literal"])
formatter.format_file("/home/pa/doc.xml")</programlisting>
<para>The example formats the XML document in <code>/home/pa/doc.xml</code>, preserving the element literal, indenting by the tab character and output in ISO-8859-1 encoding.</para>
</section>
<section><title>Members</title>
<fieldsynopsis>
<varname>compress</varname>
<initializer>False</initializer>
</fieldsynopsis>
<para>Minify the XML document.</para>
<fieldsynopsis>
<varname>correct</varname>
<initializer>True</initializer>
</fieldsynopsis>
<para>Apply formatting rules to whitespaces.</para>
<fieldsynopsis>
<varname>indent</varname>
<initializer>2</initializer>
</fieldsynopsis>
<para>Indent a child element in element content n-times by indent_char.</para>
<fieldsynopsis>
<varname>indent_char</varname>
<initializer>" "</initializer>
</fieldsynopsis>
<para>Indent a child element by this string.</para>
<fieldsynopsis>
<varname>input_encoding</varname>
<initializer>None</initializer>
</fieldsynopsis>
<para>Assume the XML document encoded by a not None value.</para>
<fieldsynopsis>
<varname>output_encoding</varname>
<initializer>None</initializer>
</fieldsynopsis>
<para>Encode the formatted XML document by a not None value.</para>
<fieldsynopsis>
<varname>preserve</varname>
<initializer>[ ]</initializer>
</fieldsynopsis>
<para>Skip formatting for all elements listed in preserve and all their descendants.</para>
</section>
<section><title>Methods</title>
<methodsynopsis>
  <methodname>format_file</methodname>
  <methodparam>
    <parameter>path</parameter>
  </methodparam>
</methodsynopsis>
<para>Format a XML document given by a path.</para>  
<methodsynopsis>
  <methodname>format_string</methodname>
  <methodparam>
    <parameter>xmldoc</parameter>
  </methodparam>
</methodsynopsis>  
<para>Format a XML document given by a string.</para>
</section>
<section><title>Cmd</title>
<programlisting language="bash"><![CDATA[xmlformat [--preserve "pre,literal"] [--compress] [--indent num] [--indent-char char]
          [--outfile file] [--encoding enc] [--outencoding enc] [--disable-inlineformatting] 
          [--dispable-correction] [--help] < --infile file | file | - >]]></programlisting></section>
<para>xmlformat can read from STDIN, like:</para>
<programlisting language="bash">$ cat /home/pa/doc.xml | xmlformat -</programlisting>
<section><title>Notes</title>
<para>Remove XmlFormatter before installing xmlformatter:</para>
<programlisting language="bash">$ pip uninstall XmlFormatter</programlisting>
<para>After reinstallation replace the string "formatter.formatter" by "formatter", "preserving" by "preserve" and "indentChar" by "indent_char" inside your scripts carefully. To reach compatibility with XmlFormatter call xmlformat with <code>--disable-inlineformatting</code> or use <code>inline=False</code> in your scripts.</para>
</section>
</article>